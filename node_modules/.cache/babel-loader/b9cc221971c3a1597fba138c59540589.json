{"ast":null,"code":"import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from \"./constants.js\";\nexport var setSearchField = function setSearchField(text) {\n  return {\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n  };\n};\nexport var requestRobots = function requestRobots(dispatch) {\n  dispatch({\n    type: REQUEST_ROBOTS_PENDING\n  });\n  fetch('https://jsonplaceholder.typicode.com/users').then(function (response) {\n    return response.json();\n  }).then(function (data) {\n    return dispatch({\n      type: REQUEST_ROBOTS_SUCCESS,\n      payload: data\n    });\n  }).catch(function (error) {\n    return dispatch({\n      type: REQUEST_ROBOTS_FAILED,\n      payload: error\n    });\n  });\n};","map":{"version":3,"sources":["/Users/antonhansson/Google Drive/Webbdevelopment/robofriends/src/actions.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","setSearchField","text","type","payload","requestRobots","dispatch","fetch","then","response","json","data","catch","error"],"mappings":"AAAA,SACIA,mBADJ,EAEIC,sBAFJ,EAGIC,sBAHJ,EAIIC,qBAJJ,QAKO,gBALP;AAOA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,IAAD;AAAA,SAAW;AACrCC,IAAAA,IAAI,EAAEN,mBAD+B;AAErCO,IAAAA,OAAO,EAAEF;AAF4B,GAAX;AAAA,CAAvB;AAKN,OAAO,IAAMG,aAAa,GAAG,SAAhBA,aAAgB,CAACC,QAAD,EAAc;AACvCA,EAAAA,QAAQ,CAAC;AAACH,IAAAA,IAAI,EAAEL;AAAP,GAAD,CAAR;AACAS,EAAAA,KAAK,CAAC,4CAAD,CAAL,CACCC,IADD,CACM,UAAAC,QAAQ;AAAA,WAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,GADd,EAECF,IAFD,CAEM,UAAAG,IAAI;AAAA,WAAIL,QAAQ,CAAC;AAACH,MAAAA,IAAI,EAAEJ,sBAAP;AAA+BK,MAAAA,OAAO,EAAEO;AAAxC,KAAD,CAAZ;AAAA,GAFV,EAGCC,KAHD,CAGO,UAAAC,KAAK;AAAA,WAAIP,QAAQ,CAAC;AAACH,MAAAA,IAAI,EAAEH,qBAAP;AAA8BI,MAAAA,OAAO,EAAES;AAAvC,KAAD,CAAZ;AAAA,GAHZ;AAIH,CANM","sourcesContent":["import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED \n} from \"./constants.js\";\n\nexport const setSearchField = (text) => ({ \n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n })\n\n export const requestRobots = (dispatch) => {\n     dispatch({type: REQUEST_ROBOTS_PENDING});\n     fetch('https://jsonplaceholder.typicode.com/users')\n     .then(response => response.json())\n     .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n     .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n }"]},"metadata":{},"sourceType":"module"}
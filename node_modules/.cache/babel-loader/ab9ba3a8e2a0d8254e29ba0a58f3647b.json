{"ast":null,"code":"import { apiCall } from './api/api';\nimport { CHANGE_SEARCHFIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants';\nexport var setSearchField = function setSearchField(text) {\n  return {\n    type: CHANGE_SEARCHFIELD,\n    payload: text\n  };\n};\nexport var requestRobots = function requestRobots() {\n  return function (dispatch) {\n    dispatch({\n      type: REQUEST_ROBOTS_PENDING\n    });\n    apiCall('https://jsonplaceholder.typicode.com/users').then(function (data) {\n      return dispatch({\n        type: REQUEST_ROBOTS_SUCCESS,\n        payload: data\n      });\n    }).catch(function (error) {\n      return dispatch({\n        type: REQUEST_ROBOTS_FAILED,\n        payload: error\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/antonhansson/Desktop/Webbdevelopment/robofriends/src/actions.js"],"names":["apiCall","CHANGE_SEARCHFIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","setSearchField","text","type","payload","requestRobots","dispatch","then","data","catch","error"],"mappings":"AAAA,SAASA,OAAT,QAAwB,WAAxB;AACA,SACEC,kBADF,EAEEC,sBAFF,EAGEC,sBAHF,EAIEC,qBAJF,QAKQ,aALR;AAQA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,IAAD;AAAA,SAAW;AAAEC,IAAAA,IAAI,EAAEN,kBAAR;AAA4BO,IAAAA,OAAO,EAAEF;AAArC,GAAX;AAAA,CAAvB;AAEP,OAAO,IAAMG,aAAa,GAAG,SAAhBA,aAAgB;AAAA,SAAM,UAACC,QAAD,EAAc;AAC/CA,IAAAA,QAAQ,CAAC;AAAEH,MAAAA,IAAI,EAAEL;AAAR,KAAD,CAAR;AACAF,IAAAA,OAAO,CAAC,4CAAD,CAAP,CACGW,IADH,CACQ,UAAAC,IAAI;AAAA,aAAIF,QAAQ,CAAC;AAAEH,QAAAA,IAAI,EAAEJ,sBAAR;AAAgCK,QAAAA,OAAO,EAAEI;AAAzC,OAAD,CAAZ;AAAA,KADZ,EAEGC,KAFH,CAES,UAAAC,KAAK;AAAA,aAAIJ,QAAQ,CAAC;AAAEH,QAAAA,IAAI,EAAEH,qBAAR;AAA+BI,QAAAA,OAAO,EAAEM;AAAxC,OAAD,CAAZ;AAAA,KAFd;AAGD,GAL4B;AAAA,CAAtB","sourcesContent":["import { apiCall } from './api/api'\nimport {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n } from './constants'\n\n\nexport const setSearchField = (text) => ({ type: CHANGE_SEARCHFIELD, payload: text })\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\n  apiCall('https://jsonplaceholder.typicode.com/users')\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}"]},"metadata":{},"sourceType":"module"}
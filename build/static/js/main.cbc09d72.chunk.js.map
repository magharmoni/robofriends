{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","fetch","then","response","json","users","setState","_this$props","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","Component","connect","searchRobots","requestRobots","isPending","error","dispatch","event","payload","target","value","Boolean","window","location","hostname","match","intitialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cbc09d72.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?size=200x200`}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map((user, i) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\t\tkey={user.id} \r\n\t\t\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\t\t\temail={robots[i].email}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchField, searchChange}) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\t\ttype='search' \r\n\t\t\t\tplaceholder='search robots' \r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{ overflowY: 'scroll', border: '5px solid black', height: '500px' }}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\nimport { setSearchField } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\t\t\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value))\r\n\t}\r\n}\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots: []\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(users => {\r\n\t\t\tthis.setState({ robots: users })\r\n\r\n\t\t})\r\n\t}\r\n\r\n\r\n\trender() {\r\n\t\tconst { searchField, onSearchChange } = this.props;\r\n\t\tconst filteredRobots = this.state.robots.filter(robot => {\r\n\t\t\t// return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t})\r\n\t\treturn !this.state.robots.length ? \r\n\t\t<h1>Loading</h1> : \r\n\t\t(\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t\t<SearchBox searchChange={onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\t\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED \r\n} from \"./constants.js\";\r\n\r\nexport const setSearchField = (text) => ({ \r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n })\r\n\r\n export const requestRobots = (dispatch) => {\r\n     dispatch({type: REQUEST_ROBOTS_PENDING});\r\n     fetch('https://jsonplaceholder.typicode.com/users')\r\n     .then(response => response.json())\r\n     .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n     .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n }","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED \r\n} from \"./constants.js\";\r\n\r\nconst intitialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=intitialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload })\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false })\r\n        default:\r\n        return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport { searchRobots, requestRobots } from './reducers';\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\r\n// const store = createStore(rootReducer)\r\n\r\n\r\nReactDOM.render(<Provider store={store}>\r\n                    <App />\r\n                </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n\r\n"],"sourceRoot":""}